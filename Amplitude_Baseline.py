# -*- coding: utf-8 -*-
"""Amplitude Baseline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119XMs81ZoZJrbrt6f6cp3YtXeGBMprf8
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

# ----- Example Data Path -----
file_path = '/content/drive/MyDrive/PatchClampData/Python2/WT1.asc'  # Path to WT1 file
baseline_window = 5  # Baseline estimation window (seconds)
peak_threshold = 5  # Relative threshold (mV) above baseline for peak detection

# ----- Amplitude Analysis Function (Non-Stable Baseline) -----
def analyze_amplitude_nonstable(file_path, baseline_window, peak_threshold):
    """
    Analyze spike amplitudes in a patch-clamp recording with a non-stable baseline.

    Parameters:
    - file_path (str): Path to the recording file (.asc format).
    - baseline_window (float): Time window (seconds) for baseline estimation.
    - peak_threshold (float): Relative threshold (mV) above baseline for peak detection.

    Returns:
    - spike_count (int): Number of spikes detected.
    - avg_amplitude (float): Average amplitude of detected spikes (mV).
    """
    try:
        # Load the data
        data = pd.read_csv(file_path, sep=',', skiprows=6, header=None)
        if data.shape[1] == 4:
            data.columns = ["Index", "Time[s]", "V-mon[V]", "Stimulus"]
        else:
            data.columns = ["Index", "Time[s]", "V-mon[V]"]

        # Extract time and voltage
        time = data["Time[s]"].values
        voltage = data["V-mon[V]"].values * 1000  # Convert volts to mV

        # Estimate dynamic baseline using a moving average
        baseline = pd.Series(voltage).rolling(window=int(baseline_window * 1000 / np.mean(np.diff(time))), min_periods=1).mean().values

        # Detect peaks relative to the dynamic baseline
        peaks, _ = find_peaks(voltage, height=(baseline + peak_threshold), distance=20, prominence=5)
        amplitudes = [voltage[peak] - baseline[peak] for peak in peaks]
        avg_amplitude = np.mean(amplitudes) if amplitudes else np.nan

        # Plot the results
        plt.figure(figsize=(12, 5))
        plt.plot(time, voltage, label='Voltage Trace', color='black')
        plt.plot(time, baseline, label='Dynamic Baseline', color='green', linestyle='--')
        plt.scatter(time[peaks], voltage[peaks], color='blue', label='Detected Peaks')
        plt.title('Amplitude Analysis (Non-Stable Baseline) - WT1')
        plt.xlabel('Time (s)')
        plt.ylabel('Voltage (mV)')
        plt.legend(loc='upper right')
        plt.tight_layout()
        plt.savefig('amplitude_plot_wt1_nonstable.svg', format='svg', bbox_inches='tight')
        plt.show()

        # Return results
        return len(peaks), avg_amplitude

    except Exception as e:
        print(f"❌ Error processing {file_path}: {e}")
        return 0, np.nan

# ----- Run Amplitude Analysis -----
spike_count, avg_amplitude = analyze_amplitude_nonstable(file_path, baseline_window, peak_threshold)

# ----- Print Results -----
if spike_count > 0 and not np.isnan(avg_amplitude):
    print(f"✅ Number of Spikes Detected: {spike_count}")
    print(f"✅ Average Amplitude (mV): {avg_amplitude:.2f} mV")
else:
    print("⚠️ No spikes detected or amplitude calculation failed. Check your input parameters or file.")

# ----- Important Note for Users -----
"""
This code is specifically designed to calculate spike amplitudes in recordings with a non-stable baseline.
- **Dynamic Baseline:** The baseline is estimated using a moving average. Adjust `baseline_window` to match the signal's time resolution.
- **Threshold Adjustment:** The `peak_threshold` parameter should be set relative to the baseline to account for signal noise and variability.
- **File Path:** Ensure the `file_path` points to the correct .asc file to be analyzed.
"""