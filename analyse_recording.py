# -*- coding: utf-8 -*-
"""GitHub2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aww4hmYBLFtFCvDLS3-T4eoO_pR4Fyf8
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def analyze_recording(file_path, spike_threshold=-50, refractory_period=0.05):
    """
    Analyze electrophysiology recordings to detect spikes and calculate spike frequency.

    Args:
        file_path (str): Path to the input .asc file.
        spike_threshold (float): Voltage threshold for spike detection (mV).
        refractory_period (float): Minimum time (s) between spikes.

    Returns:
        dict: Spike count, duration, and spike frequency.
    """
    # ----- Load and Process Data -----
    data = pd.read_csv(file_path, sep=',', skiprows=6, header=None, names=["Index", "Time[s]", "V-mon[V]", "Stimulus"])
    time = data["Time[s]"].values
    voltage = data["V-mon[V]"].values * 1000  # Convert to mV

    # ----- Plotting -----
    plt.figure(figsize=(15, 5), dpi=600)
    plt.plot(time, voltage, color='black', linewidth=1.2)
    plt.xlabel('Time (s)', fontsize=14)
    plt.ylabel('Membrane Potential (mV)', fontsize=14)
    plt.ylim(-60, 50)
    plt.tight_layout()
    plt.savefig('Recording_Trace.svg', format='svg', bbox_inches='tight')
    plt.savefig('Recording_Trace.png', format='png', dpi=600, bbox_inches='tight')
    plt.show()

    # ----- Spike Detection -----
    spikes = np.where((voltage[:-1] < spike_threshold) & (voltage[1:] >= spike_threshold))[0]
    refined_spikes = [spikes[0]]
    for i in range(1, len(spikes)):
        if time[spikes[i]] - time[refined_spikes[-1]] > refractory_period:
            refined_spikes.append(spikes[i])

    # ----- Spike Frequency Analysis -----
    spike_count = len(refined_spikes)
    duration_in_seconds = time[-1] - time[0]
    spike_frequency_hz = spike_count / duration_in_seconds

    # Print Results
    print(f"âœ… Analysis Complete for {file_path}:")
    print(f"Spike Count: {spike_count}")
    print(f"Duration: {duration_in_seconds:.2f} seconds")
    print(f"Spike Frequency: {spike_frequency_hz:.2f} Hz")

    # Return Results
    return {
        "spike_count": spike_count,
        "duration": duration_in_seconds,
        "spike_frequency_hz": spike_frequency_hz
    }

# Example Usage:
file_path = '/content/drive/MyDrive/WT1.asc'  # Change file path as needed
results = analyze_recording(file_path, spike_threshold=-50)
