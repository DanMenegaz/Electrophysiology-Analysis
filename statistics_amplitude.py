# -*- coding: utf-8 -*-
"""Statistics Amplitude.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eWprtlbPzfUuxTSQ2RikEsX-xrZLoTVd
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind

# ----- Amplitude Data -----
wt_amplitudes = [11.024726, 8.599136, 4.841208, 7.327992, 6.198889, 20.084111, 2.805831]  # WT
mutant_amplitudes = [14.874119, 4.357261, 18.184715, 30.609896, 17.563985, 18.848493, 25.348933, 9.117572]  # Mutant

# ----- Verify Sample Sizes -----
print(f"✅ WT Sample Count: {len(wt_amplitudes)}")
print(f"✅ Mutant Sample Count: {len(mutant_amplitudes)}")

# ----- Statistical Test -----
t_stat, p_value = ttest_ind(wt_amplitudes, mutant_amplitudes, nan_policy='omit')

# Determine Significance Level
significance = (
    "***" if p_value < 0.001 else
    "**" if p_value < 0.01 else
    "*" if p_value < 0.05 else
    "ns"  # Not Significant
)

# ----- Visualization -----
plt.figure(figsize=(8, 6))
colors = ['green', 'purple']
labels = ['WT', 'Mutant']

# Calculate Mean and SEM
mean_amplitudes = [np.mean(wt_amplitudes), np.mean(mutant_amplitudes)]
sem_amplitudes = [
    np.std(wt_amplitudes) / np.sqrt(len(wt_amplitudes)),
    np.std(mutant_amplitudes) / np.sqrt(len(mutant_amplitudes))
]

# Plot Bar Chart with Error Bars and Scatter Points
for i, (amplitudes, color, label) in enumerate(zip([wt_amplitudes, mutant_amplitudes], colors, labels)):
    plt.bar(i, mean_amplitudes[i], color=color, width=0.6, alpha=0.7, edgecolor='black', label=label)
    plt.errorbar(i, mean_amplitudes[i], yerr=sem_amplitudes[i], fmt='k_', capsize=10)
    plt.scatter(np.full(len(amplitudes), i), amplitudes, color=color, edgecolor='black', s=100, zorder=3)
    plt.text(i, mean_amplitudes[i] + 0.5, f"n = {len(amplitudes)}", ha='center', fontsize=10)

# Annotate Significance with Horizontal Line
x1, x2 = 0, 1
y, h, col = max(mean_amplitudes) + 1, 0.5, 'black'
plt.plot([x1, x1, x2, x2], [y, y+h, y+h, y], lw=1.5, color=col)
plt.text((x1 + x2) * 0.5, y + h, significance, ha='center', va='bottom', color=col, fontsize=12)

# Styling the Plot
plt.xticks([0, 1], labels, fontsize=12)
plt.ylabel('Amplitude (mV)', fontsize=12)
plt.tight_layout()

# Save Plot
plt.savefig('spike_amplitude_comparison.svg', format='svg', bbox_inches='tight')
plt.savefig('spike_amplitude_comparison.pdf', format='pdf', bbox_inches='tight')
plt.show()

# ----- Summary Output -----
print("✅ Spike Amplitude Plot saved as 'spike_amplitude_comparison.svg' and 'spike_amplitude_comparison.pdf'")
print(f"WT Amplitudes: {wt_amplitudes}")
print(f"Mutant Amplitudes: {mutant_amplitudes}")
print(f"WT Mean Amplitude: {mean_amplitudes[0]:.4f} mV, SEM: {sem_amplitudes[0]:.4f}")
print(f"Mutant Mean Amplitude: {mean_amplitudes[1]:.4f} mV, SEM: {sem_amplitudes[1]:.4f}")
print(f"T-statistic: {t_stat:.4f}, P-value: {p_value:.4f} ({significance})")