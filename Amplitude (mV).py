# -*- coding: utf-8 -*-
"""Amplitude.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12zahl81LlW8A7npbVTbZUy412AjI-4_G
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

# ----- Example Data Path and Adjustable Threshold -----
file_path = '/content/drive/MyDrive/PatchClampData/Python2/WT1.asc'  # Path to WT1 file
threshold = -40  # Adjustable threshold (mV) for peak detection; set based on the specific recording

# ----- Amplitude Analysis Function -----
def analyze_amplitude(file_path, threshold):
    """
    Analyze spike amplitudes in a patch-clamp recording.

    Parameters:
    - file_path (str): Path to the recording file (.asc format)
    - threshold (float): Voltage threshold (mV) above which spikes are detected

    Returns:
    - spike_count (int): Number of spikes detected
    - avg_amplitude (float): Average amplitude of detected spikes (mV)
    """
    try:
        # Load the data
        data = pd.read_csv(file_path, sep=',', skiprows=6, header=None)
        if data.shape[1] == 4:
            data.columns = ["Index", "Time[s]", "V-mon[V]", "Stimulus"]
        else:
            data.columns = ["Index", "Time[s]", "V-mon[V]"]

        # Extract time and voltage data
        time = data["Time[s]"].values
        voltage = data["V-mon[V]"].values * 1000  # Convert volts to mV

        # Detect peaks above the threshold
        peaks, _ = find_peaks(voltage, height=threshold, distance=20, prominence=5)
        amplitudes = [voltage[peak] - threshold for peak in peaks]
        avg_amplitude = np.mean(amplitudes) if amplitudes else np.nan

        # Plot the results
        plt.figure(figsize=(12, 5))
        plt.plot(time, voltage, label='Voltage Trace', color='black')
        plt.axhline(y=threshold, color='red', linestyle='--', label='Threshold')
        plt.scatter(time[peaks], voltage[peaks], color='blue', label='Detected Peaks')
        plt.title('Amplitude Analysis - WT1')
        plt.xlabel('Time (s)')
        plt.ylabel('Voltage (mV)')
        plt.legend()
        plt.tight_layout()
        plt.savefig('amplitude_plot_wt1.svg', format='svg', bbox_inches='tight')
        plt.show()

        # Return results
        return len(peaks), avg_amplitude

    except Exception as e:
        print(f"❌ Error processing {file_path}: {e}")
        return 0, np.nan

# ----- Run Amplitude Analysis -----
spike_count, avg_amplitude = analyze_amplitude(file_path, threshold)

# ----- Print Results -----
print(f"✅ Number of Spikes Detected: {spike_count}")
print(f"✅ Average Amplitude (mV): {avg_amplitude:.2f} mV")

# ----- Important Note for Users -----
"""
This code is specifically designed to calculate the amplitudes of detected spikes in a single patch-clamp recording.
- **Threshold Adjustment:** The `threshold` parameter should be adjusted for each recording to account for variations in voltage range and signal noise. A good starting point is slightly above the baseline noise level for the recording.
- **File Path:** Ensure the `file_path` points to the correct .asc file to be analyzed.
"""
