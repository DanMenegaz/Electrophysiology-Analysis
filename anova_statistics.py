# -*- coding: utf-8 -*-
"""ANOVA statistics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/166_9X18KzkMpKpxz66-pv4zS_4mzT8T9
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
from itertools import combinations
from statsmodels.stats.multitest import multipletests

# ----- Data Preparation -----
data = {
    "File": [
        "Sample1", "Sample2", "Sample3", "Sample4", "Sample5", "Sample6", "Sample7", "Sample8", "Sample9",
        "Sample10", "Sample11", "Sample12", "Sample13", "Sample14", "Sample15", "Sample16",
        "Sample17", "Sample18", "Sample19", "Sample20",
        "Sample21", "Sample22"
    ],
    "Group": [
        "Group A"] * 9 + ["Group B"] * 7 + ["Group C"] * 4 + ["Group D"] * 2,
    "Spike Frequency (Hz)": [
        2.77, 0.62, 1.20, 2.38, 2.50, 1.42, 1.23, 1.40, 0.78,  # Group A
        0.62, 0.43, 0.23, 0.42, 0.15, 0.63, 0.50,              # Group B
        0.42, 2.58, 1.37, 2.18,                                # Group C
        0.93, 0.27                                            # Group D
    ]
}

# Create DataFrame
df_results = pd.DataFrame(data)

# Specify the group order
groups = ["Group A", "Group B", "Group C", "Group D"]

# Calculate group means and SEM
group_means = df_results.groupby("Group")["Spike Frequency (Hz)"].mean().reindex(groups)
group_sems = df_results.groupby("Group")["Spike Frequency (Hz)"].sem().reindex(groups)

# Extract data for ANOVA
group_data = [df_results[df_results["Group"] == group]["Spike Frequency (Hz)"] for group in groups]

# ----- ANOVA Analysis -----
anova_result = stats.f_oneway(*group_data)
print(f"ANOVA results: F-statistic = {anova_result.statistic:.2f}, p-value = {anova_result.pvalue:.4f}")

# ----- Pairwise Comparisons with Bonferroni Correction -----
pairwise_results = {}
for (group1, data1), (group2, data2) in combinations(zip(groups, group_data), 2):
    t_stat, p_val = stats.ttest_ind(data1, data2)
    pairwise_results[(group1, group2)] = p_val

# Bonferroni correction
p_values = list(pairwise_results.values())
corrected_p_values = multipletests(p_values, method='bonferroni')[1]

# Update pairwise_results with corrected p-values
for idx, key in enumerate(pairwise_results.keys()):
    pairwise_results[key] = corrected_p_values[idx]

# ----- Visualization -----
fig, ax = plt.subplots(figsize=(10, 6))

# Means and SEMs in order
means = group_means.values
sems = group_sems.values

# Bar plot with error bars
bars = ax.bar(groups, means, yerr=sems, capsize=10, alpha=0.7, color=['blue', 'red', 'green', 'orange'])
ax.set_ylabel('Spike Frequency (Hz)', fontsize=14)
ax.set_ylim(0, max(means + sems) + 1.5)  # Extend y-axis to provide extra space

# Annotate with sample sizes
for i, group in enumerate(groups):
    n = len(df_results[df_results["Group"] == group])
    ax.text(i, means[i] + sems[i] + 0.1, f'n = {n}', ha='center', fontsize=12)

# Plot individual data points
for i, group in enumerate(groups):
    group_data = df_results[df_results["Group"] == group]["Spike Frequency (Hz)"]
    x_jitter = np.random.normal(i, 0.05, size=len(group_data))
    ax.scatter(x_jitter, group_data, color=bars[i].get_facecolor(), edgecolor='black', s=100, alpha=0.8)

# Add significance markers
y_max = max(means + sems) + 0.5
for (group1, group2), p_val in pairwise_results.items():
    if p_val < 0.05:
        x1, x2 = groups.index(group1), groups.index(group2)
        y, h = y_max, 0.2
        ax.plot([x1, x1, x2, x2], [y, y + h, y + h, y], lw=1.5, color='black')
        significance = '***' if p_val < 0.001 else '**' if p_val < 0.01 else '*'
        ax.text((x1 + x2) * 0.5, y + h, significance, ha='center', va='bottom', color='black', fontsize=16)
        y_max += 0.4  # Increase y position for next comparison

plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.savefig('anova_comparison_groups.svg', format='svg', bbox_inches='tight')
plt.savefig('anova_comparison_groups.pdf', format='pdf', bbox_inches='tight')
plt.show()

# ----- Export Results -----
# Save pairwise p-values to a CSV
pairwise_df = pd.DataFrame({
    'Comparison': [f"{group1} vs {group2}" for group1, group2 in pairwise_results.keys()],
    'Corrected p-value': list(pairwise_results.values())
})
pairwise_df.to_csv('pairwise_comparisons.csv', index=False)

# ----- Summary Output -----
print("✅ ANOVA plot saved as 'anova_comparison_groups.svg'")
print("✅ Pairwise comparison results saved as 'pairwise_comparisons.csv'")
print(f"ANOVA F-statistic: {anova_result.statistic:.2f}, p-value: {anova_result.pvalue:.4f}")